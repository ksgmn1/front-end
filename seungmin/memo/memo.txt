*************************** Day 1_0925 ***************************
구글에 js 캐러셀
https://velog.io/@grinding_hannah/JavaScript-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EC%BA%90%EB%9F%AC%EC%85%80Carousel-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0

참고 정리사이트
https://www.w3schools.com/

강의실
https://github.com/nigrojin
-----------------------------------------------------------------------------------------------

href="주소"  --> 링크
target="_blank"  --> 새로운탭에서 링크열기

로그인폼에서 <label>과 <input>은 세트다.
label의 for값과 input의 id값이 같아야한다.

svg의 ellipse : 타원, cx,cy는 원의 중심, rx는 x좌표쪽(수평)반지름, ry는 y좌표쪽(수직)반지름
raster, svg  비교

블로그정리
	네이버블로그
	티스토리
	브런치
	벨로그
	노션

*************************** Day 2_0926 ***************************
스타일에서는 주석을 /* 주석 */ 으로 표현 가능하다.

*************************** Day 3_0927 ***************************
디자인 exe
	figma
	어피니티디자이너

*************************** Day 4_1004 ***************************
flex 정리
gird정리
반응형
예제문제들 풀이


요즘 앱 종류
	(pc)웹앱

	네이티브앱

	하이브리드앱 = 웹앱 + 네이티브앱

	모바일 웹앱

*************************** Day 5_1005 ***************************

*************************** Day 8_1011 ***************************
radio의 name을 일치시키면 radio를 그룹화 한다.
포맷 대비 깃헙 올리기

JavaScript 첫날

js설치확인 -> 터미널에 node -v 채팅

node.js : 자바스크립트 컴파일러
컴파일러 : 사람이 쓴 코드를 기계가 이해할 수 있는 언어(기계어)로 변환한다.

*************************** Day 12_1017 ***************************
메뉴 아이콘(3줄) : &#9776
버튼은 <input type="button">이나 <button>

script에서 스크롤은 document.addEventListener()로

클래스없으면 추가 있으면 제거 -> ooo.classList.toggle("");

// 참조사이트
https://poiemaweb.com/js-syntax-basics

☆★

*************************** Day 13_1018 ***************************
X 버튼 : &times;   나는 &#10006 으로 함.

*************************** Day 14_1019 ***************************
https://ezgif.com/video-to-gif    -> gif 만드는 사이트
양 옆으로 넘기는 화살표 버튼 // &#10094, &#10095


*************************** Day 16_1023 ***************************
테마선택 다크모드 할 때
	ㄴ개발자도구 Application - Local storage
이벤트 : dragover : 드래그 중, drop : 드랍


*************************** Day 17_1024 ***************************
CRUD

Create
Read
Update
Delete

DOMContentLoaded - 문서의 로드

textarea, input의 change 이벤트 : 내용이 바뀌는 것

dblclick 이벤트 : 더블클릭 

prepend : 컨테이너의 첫번째 자식으로 아이템을 추가한다.
--> 최신 노트가 더 위에 오도록 처리

input 이벤트 : 유저가 값을 입력 중일 때

엘리먼트A.nextElementSibling : 엘리먼트A 바로 다음의 엘리먼트


*************************** Day 18_1025 ***************************
tailwindCSS, Bootstrap : 2개의 css툴이있다.

tailwind cdn(cdn : 콘텐츠 전송 네트워크, Content Delivery Network)
tailwind 사용하려면 head에 <script src="https://cdn.tailwindcss.com"></script> 넣고

폰트사용하려면 <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Inconsolata">
로 쓰겟다고 선언하고     <style> body {font-family: "Inconsolata", sans-serif; } </style> 로 선언해야 사용가능.

tailwind 함수
sticky : position: sticky; : static이랑 fixed 합친거라고 생각하면 된다.
p : padding // 보통 숫자 4값이 1rem  >>  p-2 : padding 0.5rem;
px : padding (x축, 왼쪽오른쪽) , py(y축, 위아래) 
m : margin  ,  똑같이 mx, my 
w : width 
h: height    // h-[500px] 로 커스텀 가능 (정해져있는 틀 말고)
z : z-index // 10~50값이 있다 (10단위)
bg-black : background color : black
text-white : text-color : white
hover:bg-white : hover시 backgroundcolor : white
text-center : text-align : center;
text-sm, text-8xl : sm : small   // text크기조절 함수
visibility : none과 다른게 안보이더라도 공간을 차지하고 있다.
md:visible   >> md : 뷰포트의 width값이 medium크기(768px)가 되면 보이게 한다.
* cafe 사이트같은경우 display가 아니라 visible로 한 이유는 flex라 사라지면 between이 풀려서 원하는 레이아웃이 안나오기 때문. 
tracking : letter-spacing
border(단위 : px)
leading : 줄간격문법 leading-relaxed
//   peer 문법
input
peer/eat, peer/drink

label
peer-checked/eat, peer-checked/drink

Menu
peer-checked/eat, peer-checked/drink
//

★☆company 사이트★☆
lg:hidden : 뷰포트 라지사이트부터 히든
rounded : border-radius 0.25rem

* ctrl + k + f : 태그 정렬
* sm : 640px~767, md : 768px~1023, lg : 1024px
sm>= 640, md>=768, lg>=1024, xl>=1280
*************************** Day 19_1026 ***************************
포트폴리오 - 스스로 사이트 만들어보기
https://www.wix.com/website-template/view/html/3324 카피하기!

padding에는 bg 색 입혀지지만 margin에는 안먹힌다

MAIN2 구역 그리드 border처럼 보이게하려면 bg-black하고 각 그리드부분구역마다 배경 따로 주면된다.

*************************** Day 20_1027 ***************************
transition처럼 천천히 bg 색 바뀌는효과 : duration-300 (100~500) 

*************************** Day 22_1031 ***************************
만든 사이트 배포 : netlify

*************************** Day 23_1101 ***************************
ES6 : Ecma International이 규격에따라 정의한 스크립트언어

리액트 프로젝트 생성 명령어
프로젝트폴더 vscode 터미널에서 
npx create-react-app react-basic 작성하면 react-basic이라는 이름의 폴더가 생성

* npx npm 검색해서 뭔지 알아보기 
	npm : node package manager // 패키지 설치,삭제 명령어
	npx : 패키지 실행 명령어
https://velog.io/@sanghyeon/npm%EA%B3%BC-npx-%EA%B7%B8%EB%A6%AC%EA%B3%A0-yarn#yarn   // ====> npm 자세한설명 vel og

#  react-basic 프로젝트로 이동 
cd react-basic  
cd : change directory (이동할 경로)

# 서버 실행 명령어
react-basic/
npm start

# 서버 종료
Ctrl + C

package.json 
ㄴ프로젝트에 대한 정보

public/
ㄴ정적 파일 저장 경로

*************************** Day 24_1102 ***************************
리액트 기초, JSX, 컴포넌트

변수 출력할 때 { } 중괄호 사용

리스트 랜더링
const beerList = beers.map(beer => (
    // key : 리액트 비교 알고리즘 상 필요한 값 "재조정"
    // key는 고유값, 즉 id처럼 생각
    <li key = {beer.name}>{beer.name}, {beer.origin}</li>
))

컴포넌트이름은 대문자로 시작.

children props 
props에 children 기입하고
컴포넌트 의 중간에 컴포넌트 넣는 식

useContext Hook 사용하려면 
ㄴ import { createContext, useContext } from "react";   작성


*************************** Day 25_1103 ***************************

리액트 라우터 설치 명령어
react-basic/
npm install react-router-dom

라우터 사용하려면 맨위에 
ㄴimport{ HashRouter as Router, Routes, Route, Link, useParams } from 'react-router-dom'; 작성

<Link> 가 <a> 이고 Link 안의 to 가 href라고 생각하자.
 
<Route path="/post/:postId" element={<Post />} />
ㄴ :postid >> post 뒤에오는 값을 id로 인식하겠다.


*************************** Day 26_1106 ***************************
todo-app

# 테일윈드 설치명령어
 npm install tailwindcss

# 테일윈드 설정파일 생성 명령어
npx tailwindcss init

disabled : 비활성화 

inputRef.current.focus();   : 인풋칸에 커서 깜빡이게함
 // import { useRef} from "react" 하고 const inputRef = useRef(); 해야함
이걸 return의 <input>에 ref={inputRef} 로 연결

react 참고사이트 : https://velog.io/@josuncom/2.-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EA%B0%9C%EB%85%90-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0

*************************** Day 27_1107 ***************************
todo-app

mytube

임의의 id 생성 : id: `todo-${Date.now()}`

https://webstoryboy.co.kr/1966 - 나만의 유튜브만들기

*************************** Day 28_1108 ***************************
Ctrl + Shift + L   :  vs에서 다중선택해서 수정할 때

class : radio 체크박스와 달리 여러개중 하나 선택할 때 
checkbox 도 그렇고 radio도 그렇고 여러개항목 중 골라야한다면 peer 쓰고 hidden으로 가려서 
peer-checked: 로 스타일주기

react는 const [a, seta] = useState(""); 값 정해주고 set값 변경 및
onEvent{() => EventHandler()}로 변경값 주기

bg-black/[0.4]  : /[0.1~0.9] opacity값 0.1 => 10%

tvvmvn 선생님 github

*************************** Day 29_1109 ***************************
mytube 복습


*************************** Day 30_1110 ***************************
개발 스택(조합)
MERN

M - MongoDB (데이터베이스)
E - Express.js (서버개발 프레임워크)
R - React (클라이언트 라이브러리)
N - Node.js (서버 개발 언어)

MongoDB - MongoDB Community Server 설치

MongoDB Compass
몽고DB 서버에 접속용 클라이언트 프로그램

POSTMAN
API 테스트용 도구

Express 생성기 명령어
npm install -g express-generator

글로벌 패키지 확인 명령어
npm list -g

express 프로젝트 생성 명령어
instagram-clone/

express --no-view server

# express 프로젝트 패키지 리스트

예시 : cd server 이후 npm install express

server/
express - 프레임 워크
debug - 디버깅 기능 제공
cookie-parser - 쿠키 수집 기능
http-errors - 에러처리 기능
morgan - 통신기록 저장 및 출력
helmet - 요청 헤더 보안 기능
compression - 송수신 데이터의 압축기능
mongoose -몽고DB용 ODM
multer -파일 처리 기능
passport - 인증 기능
passport-jwt - 인증 기능
jsonwebtoken - JSON 웹토큰 기능
express-validator - 유효성 검사 기능
luxon - 날짜 데이터 가공
dotenv - 환경변수 사용환경 제공
cors - CORS 환경제공 ( Cross - Origin Resource Sharing)

+ nodemon - 파일 변경시에 재컴파일을 시도한다
npm install -g nodemon


# 프로젝트의 구조(경로)
bin/ - 서버실행 파일
controllers/ - 컨트롤러 파일
files/ - 파일 서버의 역할
        avatar/ 프로필 사진
        photos/ 게시물 사진
middleware/ - 미들웨어사진
models/ 모델파일
public/ - 파일 저장 경로
routes/ - 라우트 파일
.env - 환경변수 저장
app.js - 프로젝트의 메인


# MVC 패턴 (Model-View-Controller)
소프트웨어 아키텍쳐 디자인 패턴

M(Model) - 데이터 처리 부분
V(View) - 보여지는 부분 // 클라이언트
C(Controller) - 로직 처리 부분 // API처리 부분


# 클라이언트 - 서버 인증 절차
JWT(JSON Web Token)기반 인증

1 유저가 로그인을 시도한다.
2 서버는 로그인에 성공한 경우 클라이언트에게 JWT를 발급한다.
3 클라이언트는 요청 헤더에 토크를 담아 요청한다.

*************************** Day 31_1113 ***************************
클라이언트(고객) vs 브라우저

# 미들웨어 (Middle + Software)
클라이언트의 요청과 서버의 응답사이에서 다양한 일을 처리한다.

1 auth.js
인증처리
2 loginvalidator.js
로그인 데이터 유효성검사
3 signUpValidator.js
회원가입 데이터 유효성 검사
4 upload.js
클라이언트가 업로드한 파일 처리

payload : 유저 데이터

# 퀴즈  : 서버의 주요사용 
1 인증처리
2 목적데이터가공

#MERN의 스택의 각각의 목적

1 NoSQL에서 관련된 데이터를 구분하는 기준으?
(RDB에서 테이블에 해당한다.)
컬렉션
도큐먼트

express validator 유효성검사 참고 사이트
ㄴ https://choice91.tistory.com/59

# 서버의 응답코드(상태코드)

1XX (정보) : 서버가 요청을 처리중인 상태

2XX (성공) : 
	200 OK : 서버가 요청을 성공적으로 처리

3XX (Redirection)
	304 NotModified(수정되지 않음)	
	-> 클라이언트는 캐시에 저장된 리소스를 계속 사용할 수 있다.

4XX (클라이언트 에러)
	400 BadRequest(잘못된 요청) - 요청 문법이 잘못된 경우, 입력값이 유효하지 않은 경우
	401 Unauthorized(권한 없음) - 인증 실패
	404 NotFound(찾을 수 없음) - 클라이언트가 요청한 리소스를 서버가 가지고 있지 않을 때

5XX (서버 에러)
	500 (Internal Server Error) - 내부 서버 오류

* mongoose 참고사이트
[
https://velog.io/@ckstn0777/Mongoose-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0

https://velog.io/@blacksooooo/MongoDB-mongoose%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-MongoDB-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0
]

* react 참고사이트
[
https://kyounghwan01.github.io/blog/React/
]

*************************** Day 32_1114 ***************************
1e9  >>  e9는 0이 9개라는 뜻  >> 1000000000
${__dirname} : 현재 파일 위치

# 컨트롤러
1 userController
2 postController
3 commentController
4 profileController

# 라우터
요청 URL과 적절한 리소스를 연결한다

1 indexRouter (메인 라우터)
2 userRouter
3 postRouter
4 commentRouter
5 profileRouter

# HTTP 요청 메서드     >>// 라우팅 때 사용
1 GET  -  데이터 읽기 요청
2 POST  - 데이터 생성 요청
3 PUT - 데이터 수정 요청
4 DELETE - 데이터 삭제 요청

# 씨드 데이터
seed.js

# 씨드데이터 생성 명령어
node seed run mongodb://127.0.0.1:27017/instagram_clone_account

 * 지우려면 run -> r머시기
ㄴ구조 : node seed directive MONGODB_URI
directive : 명령어

*************************** Day 33_1115 ***************************
master에서 샘플 이미지 다운로드

# 서버 실행 명령어
npm run start:watch

POSTMAN  - api테스터
workspace - blank collection - Add request - 
해서 이름바꾸고 GET, POST, PUT 중에 필요한 상태 하고 
Body - raw -JSON 으로 코드 작성 // ex) users 에 유저 하나 추가
// ex) login에 email과 password넣고 users에 넣은 유저랑 비교해서 맞으면 로그인
// ex) 로그인 하면 access_token나오는데 그걸 PUT user 에 auth에 토큰 넣고 Body-raw-JSON에서 수정가능 form-data에 avatar를 Key값에 넣고 Value에 사진 넣으면 Body에 avatarUrl 추가

*************************** Day 34_1116 ***************************
Following 컬렉션

user / following

태민 / 뉴진스
태민 / 르세라핌
승민 / 르세라핌
민지 / 차은우

1. 태민이 팔로우하는 유저를 알고싶다.
  > user가 '태민'인 도큐먼트 검색
  > following 필드를 추출한다
  > 뉴진스, 르세라핌

2. 르세라핌의 팔로워를 알고싶다.
  > following이 르세라핌인 도큐먼트 검색
  > user필드를 추출한다.
  > 태민, 승민

find() : Model.find(fields) : fields에 맞는 도큐먼트를 여러개 검색한다.

countDocuments() : Model.count(fields) : fields를 만족하는 도큐먼트의 갯수를 구한다.

RegExp(검색할 문자, 옵션) : 정규식

POSTMAN에서
localhost:3000/api/profiles?username=n   : 이름에 n이 들어가는 user 검색
localhost:3000/api/profiles?followers=michelangelo : 미켈란젤로를 follow하는 user 검색

populate() : 컬렉션 조인

# skip limit
선배가 30~50을 구해라
skip : 30
limit : 20

// 한번 데이터를 전송할 때 보낼 도큐먼트의 수
const limit = req.query.limit || 5;
	
// 전송할 때 건너뛸 도큐먼트의 수
const skip = req.query.skip || 0;

*************************** Day 35_1117 ***************************
POSTMAN 내용

localhost:3000/api/posts?username=michelangelo  // 미켈란젤로 포스트보기
localhost:3000/api/posts  // DB에 있는 전체 포스트 보기

주소가 같아도 메서드가 다르면 get, post 둘다가능

json으로 파일을 주고 받을 수 없다. > form-data로 가능

findById() : Model.findById(id) : id로 도큐먼트 검색

comment.js 댓글삭제할때의 라우팅 id는 comment의 id를 입력해야한다.

localhost:3000/api/posts/post의 id/comments  : 한 post의 댓글보기

잘꾸민 깃헙, 블로그 만든 사람 (둘 다 동일인)
ㄴ https://devtella.vercel.app/
https://github.com/subtitle1?tab=overview&from=2023-11-01&to=2023-11-17

*************************** Day 36_1120 ***************************
# 클라이언트 프로젝트 생성
instagram-clone/
npx create-react-app client

# 클라이언트에서 필요한 패키지

1. react-router-dom
라우터

2. tailwindcss
스타일

# 라우터 설치
npm install react-router-dom

# 테일윈드 설치
npm install tailwindcss

# 테일윈드 설정파일 생성
npx tailwindcss init
  > 루트에 tailwindcss.config.js 생성됨

# 소스파일

1. components - 컴포넌트

2. service - 서버 요청 라이브러리
header.js - 헤더 파일
user.js - 유저 관련 요청 처리
post.js - 게시물 관련 요청 처리
comment.js - 댓글 관련 요청 처리
profile.js - 프로필 관련 요청 처리

3 utils - 유틸리티 기능
validator.js - 클라이언트 측 유효성 검사 도구

개인공부
ㄴ[ 개발자 황준일 ]  https://junilhwang.github.io/TIL/Review/2021-year/end/#_4-%E1%84%83%E1%85%A2%E1%84%8B%E1%85%AC-%E1%84%92%E1%85%AA%E1%86%AF%E1%84%83%E1%85%A9%E1%86%BC

*************************** Day 37_1121 ***************************

클라이언트 컴포넌트

1 Auth (인증관련)
 - AuthContext - Provider 컴포넌트
 - AuthProvider - 유저 데이터 관리
 - AuthRequired - 인증 검사

2 Layout - 레이아웃
3 Feed - 피드
4 Explore - 프로필 검색
5 PostView - 게시물 상세보기
6 PostTemplate - 게시물 템플릿 (게시물 상세보기, 피드)
 - PostTemplate - 템플릿
 - Carousel - 이미지
7 PostForm - 게시물 업로드 폼
8 Comments - 댓글
 - Comments - 메인
 - Comment - 댓글 아이템
 - Form - 댓글 폼
9 Profile - 프로필 페이지
 - Profile - 메인
 - Profileinfo - 프로필정보
 - Postitem - 타임라인의 게시물 아이템
10 ProfileEdit - 프로필 수정
11 Follow 
 - Followers - 팔로워 리스트
 - Following - 플로잉 리스트
 - Profileitem - 프로필 아이템
12 Login - 로그인
13 SignUp - 회원가입
14 NotFound - 404페이지
15 Spinner - 대기상태 표시

# 서버 실행 명령어
server/
npm run start:watch

# 클라이언트 서버 실행 명령어
client/
npm start

* 서버 먼저열고 클라이언트열어서 리액트 port 3001로 켜기

*************************** Day 39_1123 ***************************
PostView.js 에서
replace : false
위치1 -> 게시물 상세보기 페이지 -> 404페이지

replace : true
위치 1 -> 상세보기 / 404페이지

*************************** Day 40_1124 ***************************
<textarea> 텍스트 작성 할 수 있는 공간
textarea 에 className으로 resize-none 넣으면 크기 조정 불가능 -x, -y 넣으면 축 크기 조정 가능